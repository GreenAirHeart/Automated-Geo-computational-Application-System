# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:/QT/application_setting.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# import model_page as mp
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWebChannel import QWebChannel
from bs4 import BeautifulSoup
import sys
from PyQt5 import QtWidgets, QtWebEngineWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtWebEngineWidgets import *
from PyQt5.QtWebEngineCore import QWebEngineHttpRequest
from PyQt5.QtWebEngineWidgets import QWebEnginePage
import bs4 as bs
import sys
import urllib.request
from PyQt5.QtWebEngineWidgets import QWebEnginePage
from PyQt5.QtWidgets import QApplication
from PyQt5.QtCore import QUrl
from PyQt5.QtCore import QUrl, pyqtSlot
import expected_DEM as eDEM


# from flask import Flask, request, jsonify
# class MyWebPage(QWebEnginePage):
#
#
#     def on_load_finished(self, ok):
#         if ok:
#             # Execute JavaScript code to get the calculated value
#             script = "document.getElementById('topLeftInput').value;"
#             self.runJavaScript(script, self.handle_result)
#
#     def handle_result(self, result):
#         print("Calculated value:", result)
#         # Update your QTextBrowser or perform any other action with the result

#
# class SignalHandler(QObject):
#     top_left_changed = pyqtSignal(str)  # Custom signal for top left value
#     bottom_right_changed = pyqtSignal(str)  # Custom signal for bottom right value

class Ui_application_page(object):
    coordinates_ready = QtCore.pyqtSignal(str, str)
    task_ready = QtCore.pyqtSignal(str)
    resolution_ready = QtCore.pyqtSignal(str)
    # def __init__(self):
    #     self.signal_handler = SignalHandler()

    def setupUi(self, Dialog):
        Dialog.setObjectName("Automatic Geomorphological Classification Tool")
        Dialog.setWindowIcon(QIcon("dde.ico"))
        Dialog.resize(2000, 1400)
        Dialog.setWindowFlag(Qt.WindowMinimizeButtonHint)
        self.textBrowser = QtWidgets.QTextBrowser(Dialog)

        self.textBrowser.setGeometry(QtCore.QRect(0, 0, 1200, 1400))
        self.textBrowser.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        # button2.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(100, 100, 421, 51))
        self.label_2.setStyleSheet("font: 75 20pt \"Agency FB\";\n""\n""")
        self.label_2.setObjectName("label_2")
        self.label_2.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        self.label_6 = QtWidgets.QLabel(Dialog)
        self.label_6.setGeometry(QtCore.QRect(530, 100, 421, 51))
        self.label_6.setStyleSheet("font: 75 20pt \"Agency FB\";\n""color: rgb(188, 188, 188);\n""color: rgb(191, 191, 191);\n""\n""")
        self.label_6.setObjectName("label_6")

        self.label_7 = QtWidgets.QLabel(Dialog)
        self.label_7.setGeometry(QtCore.QRect(900, 100, 421, 51))
        self.label_7.setStyleSheet("font: 75 20pt \"Agency FB\";\n""color: rgb(188, 188, 188);\n""color: rgb(191, 191, 191);\n""\n""")
        self.label_7.setObjectName("label_7")

        self.label_5 = QtWidgets.QLabel(Dialog)
        self.label_5.setGeometry(QtCore.QRect(100, 180, 421, 51))
        self.label_5.setStyleSheet("font: 75 20pt \"Agency FB\";\n""color: rgb(255, 0, 0);")
        self.label_5.setObjectName("label_5")

        self.textBrowser_2 = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser_2.setGeometry(QtCore.QRect(1200, 0, 800, 1400))
        self.textBrowser_2.setObjectName("textBrowser_2")

        self.label_8 = QtWidgets.QLabel(Dialog)
        self.label_8.setGeometry(QtCore.QRect(1200, 55, 421, 51))
        self.label_8.setStyleSheet("font: 75 18pt \"Agency FB\";\n""color: rgb(0, 0, 0);\n""\n""")
        self.label_8.setObjectName("label_8")

        self.line = QtWidgets.QFrame(Dialog)
        self.line.setGeometry(QtCore.QRect(1200, 150, 800, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")

        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(120, 200, 421, 51))
        self.label.setStyleSheet("font: 75 18pt \"Agency FB\";")
        self.label.setObjectName("label")

        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(120, 310, 421, 51))
        self.label_3.setStyleSheet("font: 75 18pt \"Agency FB\";")
        self.label_3.setObjectName("label_3")

        self.label_9 = QtWidgets.QLabel(Dialog)
        self.label_9.setEnabled(True)
        self.label_9.setGeometry(QtCore.QRect(100, 300, 421, 51))
        self.label_9.setStyleSheet("font: 75 20pt \"Agency FB\";\n""color: rgb(255, 0, 0);")
        self.label_9.setObjectName("label_9")

        self.textBrowser_4 = QtWidgets.QFrame(Dialog)
        self.textBrowser_4.setGeometry(QtCore.QRect(110, 395, 1060, 700))
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.textBrowser_4.setStyleSheet("background-color: rgb(255, 255, 127);")
        self.textBrowser_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.textBrowser_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.textBrowser_4.setLineWidth(9)
        self.textBrowser_4.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        # 27.293689224852407, 104.2218017578125
        # 29.046565622728846, 102.4420166015625


        # self.web_page = MyWebPage(self.textBrowser_4)
        self.web_view =QtWebEngineWidgets.QWebEngineView(self.textBrowser_4)
        self.web_view.load(QUrl.fromLocalFile("D:/arcpy_project/Scripts/method/map.html"))
        # self.web_view.page().setWebChannel(channel)

        # self.web_view.setPage(self.web_page)
        # self.web_page.loadFinished.connect(self.web_page.on_load_finished)
        # self.web_view.setPage(self.web_page)
        #
        # self.web_page.loadFinished.connect(self.web_page.on_load_finished)

        # map_html = """
        #
        #
        #
        #         """
        #
        # # Set the HTML content in the QTextBrowser
        # self.web_view.setHtml(map_html)
        self.web_view.resize(1060, 700)
        self.web_view.move(0, 0)




        # layout = QVBoxLayout()
        # self.browser = QWebEngineView()  # 加载本地html
        # self.browser.load(QUrl(QFileInfo("D:/arcpy_project/Scripts/method/map_test.html").absoluteFilePath()))
        # # self.setCentralWidget(self.browser)
        # layout.addWidget(self.textBrowser_4)
        # layout.addWidget(self.browser)

        # Set the layout for the custom widget
        # self.setLayout(layout)
        # win1 = QWidget()
        # win1.setGeometry(500, 500, 400, 400)
        # win1.setStyleSheet("background-color:yellow;")
        # hbox = QHBoxLayout()
        # hbox.addWidget(win1)

        # self.button = QtWidgets.QPushButton("Get Coordinates")


        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(1030, 1025, 100, 40))
        self.pushButton_2.setStyleSheet("background-color: rgb(109, 151, 115);\n""font: 75 15pt \"Agency FB\";""color:white")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.get_coordinates)
        # self.pushButton_5 = QtWidgets.QPushButton(Dialog)
        # self.pushButton_5.setGeometry(QtCore.QRect(1070, 650, 100 ,40))
        # self.pushButton_5.setStyleSheet("font: 75 15pt \"Agency FB\";")
        # self.pushButton_5.setObjectName("pushButton_5")
        #
        # self.pushButton_6 = QtWidgets.QPushButton(Dialog)
        # self.pushButton_6.setGeometry(QtCore.QRect(1070, 880, 100, 40))
        # self.pushButton_6.setStyleSheet("font: 75 15pt \"Agency FB\";")
        # self.pushButton_6.setObjectName("pushButton_6")
       #time setting
        # self.label_4 = QtWidgets.QLabel(Dialog)
        # self.label_4.setGeometry(QtCore.QRect(120, 980, 421, 51))
        # self.label_4.setStyleSheet("font: 75 18pt \"Agency FB\";")
        # self.label_4.setObjectName("label_4")


       # resolution
        self.label_10 = QtWidgets.QLabel(Dialog)
        self.label_10.setGeometry(QtCore.QRect(120, 1150, 421, 51))
        self.label_10.setStyleSheet("font: 75 18pt \"Agency FB\";")
        self.label_10.setObjectName("label_10")


        #time setting
        # self.calendarWidget = QtWidgets.QDateTimeEdit(Dialog)
        # self.calendarWidget.setGeometry(QtCore.QRect(535, 980, 401, 65))
        # self.calendarWidget.setStyleSheet("font: 75 15pt \"Agency FB\";")
        # self.calendarWidget.setObjectName("calendarWidget")

        self.pushButton_3 = QtWidgets.QPushButton(Dialog)
        self.pushButton_3.setGeometry(QtCore.QRect(1030, 1300, 152, 52))
        self.pushButton_3.setStyleSheet("background-color: rgb(12, 59, 46);\n""font: 75 20pt \"Agency FB\";""color: white;")
        self.pushButton_3.setObjectName("pushButton_3")



        # self.pushButton_2.clicked.connect(self.get_coordinates)




        self.comboBox = QtWidgets.QComboBox(Dialog)
        self.comboBox.setGeometry(QtCore.QRect(535, 200, 635, 65))
        self.comboBox.setStyleSheet("font: 75 15pt \"Agency FB\";")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.currentIndexChanged.connect(self.on_combobox_changed)


     # resolution
        self.comboBox_2 = QtWidgets.QComboBox(Dialog)
        self.comboBox_2.setGeometry(QtCore.QRect(535, 1150, 401,65))
        self.comboBox_2.setStyleSheet("font: 75 15pt \"Agency FB\";")
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.currentIndexChanged.connect(self.on_combobox2_changed)
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        self.pushButton_w = QtWidgets.QPushButton(Dialog)
        self.pushButton_w.setGeometry(QtCore.QRect(112, 1300, 212, 52))
        self.pushButton_w.setStyleSheet("background-color: rgb(238, 238, 238);\n""font: 75 15pt \"Agency FB\";""color:rgb(12, 59, 46)")
        self.pushButton_w.setObjectName("pushButton_3")
        # self.pushButton_w.setGeometry(QtCore.QRect(535, 1200, 635, 80))
        # self.pushButton_w.setStyleSheet("font: 75 15pt \"Agency FB\";")
        self.pushButton_w.setText('Step 1 mechanism')
        # self.pushButton_w.setOpenExternalLinks(False)  # Prevent opening links in external browser

        # Connect clicked signal to showPopup method
        self.pushButton_w.clicked.connect(self.showPopup)

        button_object_names = ["pushButton_2","pushButton_w","pushButton_3"]  # Add more button object names if needed

        for button_name in button_object_names:
            # Find the button by its object name
            button = getattr(self, button_name)
            if isinstance(button, QPushButton):

                # Set default cursor shape to arrow
                button.setCursor(Qt.ArrowCursor)

                # Connect signals to slots
                button.enterEvent = lambda event, button=button: self.changeCursorToHand(button)
                button.leaveEvent = lambda event, button=button: self.changeCursorToArrow(button)

    def changeCursorToHand(self, button):
            button.setCursor(Qt.PointingHandCursor)  # Change cursor to pointing hand when mouse enters button area

    def changeCursorToArrow(self, button):
            button.setCursor(Qt.ArrowCursor)

    def showPopup(self, link):
        # Create and show the pop-up window
        popup = PopupWindow()
        popup.exec_()


    def get_coordinates(self):
        self.web_view.page().runJavaScript('document.getElementById("topLeftInput").value;', self.handle_top_left)
        self.web_view.page().runJavaScript('document.getElementById("bottomRightInput").value;', self.handle_bottom_right)
    # def handle_top_left(self, value):
    #     self.signal_handler.top_left_changed.emit(value)  # Emit the custom signal
    #
    # def handle_bottom_right(self, value):
    #     self.signal_handler.bottom_right_changed.emit(value)  # Emit the custom signal
    def handle_top_left(self, value):
        self.top_left_value = value
        self.check_and_emit_coordinates()
        print("Top Left:", value)
        # top_left_coordinates = self.top_left_value.split(",")[1].split()
        # latitude1 = top_left_coordinates[0]
        # longitude1 = top_left_coordinates[1]
        # return latitude1,longitude1

        # # Extract the latitude and longitude values

        # import subprocess
        # subprocess.run(['python', 'expected.py', str(top1), str(top2), str(bottom1), str(bottom2)])

        # eDEM.coordinates1(latitude1,longitude1)


    def handle_bottom_right(self, value):
        self.bottom_right_value = value
        self.check_and_emit_coordinates()
        print("Bottom Right:", value)
        # bottom_right_coordinates = self.bottom_right_value.split(",")[1].split()

        # # Extract the latitude and longitude values
        # latitude2 = bottom_right_coordinates[0]
        # longitude2 = bottom_right_coordinates[1]
        # eDEM.coordinates2(latitude2,longitude2)
        # # return value

    # # def check_coordinates_ready(self):
    #     if self.top_left_value is not None and self.bottom_right_value is not None:
    #         self.coordinates_ready.emit(self.top_left_value, self.bottom_right_value)
    #         print("Emitting coordinates_ready signal")
    def check_and_emit_coordinates(self):
        if hasattr(self, 'top_left_value') and hasattr(self, 'bottom_right_value'):
            self.emit_coordinates_ready()

    def emit_coordinates_ready(self):
        try:
            # Obtain coordinates and emit the signal
            # //self.get_coordinates()
            # self.handle_top_left()
            # self.handle_bottom_right()
            # Assuming get_coordinates method retrieves coordinates
            # Emit the signal with appropriate arguments
            self.coordinates_ready.emit(self.top_left_value, self.bottom_right_value)
            print("Emitting coordinates_ready signal")
        except Exception as e:
            print("Error emitting coordinates_ready signal:", e)


    # def save_coordinates(self):
    #     # Obtain coordinates from JavaScript code
    #     self.get_coordinates()
    # def on_load_finished(self, ok):
    #     if ok:
    #         # Execute JavaScript code to get the calculated value
    #         script = "document.getElementById('result').innerText;"
    #         self.runJavaScript(script, self.handle_result)
    #
    # def handle_result(self, result):
    #     print("Calculated value:", result)
    #     # Update your QTextBrowser or perform any other action with the result
    #     self.text_browser.append(f"Calculated value: {result}")
    #
    # @pyqtSlot()
    # def save_rectangle(self):
    #     # Get the coordinates values from the input fields
    #     top_left_value = self.top_left_input.text()
    #     bottom_right_value = self.bottom_right_input.text()
    #     print(top_left_value)
    #     # Update the label with coordinates values
    #     self.coordinates_label.setText(
    #         f"Top Left Coordinates: {top_left_value}\nBottom Right Coordinates: {bottom_right_value}")


    def closeEvent(self, event):
            confirm = QMessageBox.question(
                self, "Confirm Close",
                "Are you sure you want to close the application?",
                QMessageBox.Yes | QMessageBox.No, QMessageBox.No
            )

            if confirm == QMessageBox.Yes:
                event.accept()
            else:
                event.ignore()



    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Automatic Geomorphological Classification Tool", "Automated Geo-morphological Classification Driven By A Knowledge Graph"))
        self.label_2.setText(_translate("Dialog", "Application Setting"))
        self.label_6.setText(_translate("Dialog", "Model Selecting"))
        self.label_7.setText(_translate("Dialog", "Data Matching"))
        self.label_5.setText(_translate("Dialog", "*"))
        self.textBrowser_2.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:15pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Agency FB\',\'serif\'; font-size:18pt; font-weight:600;\"><br /></p>\n"
"<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Agency FB\',\'serif\'; font-size:18pt; font-weight:600;\"><br /></p>\n"
"<p align=\"justify\" style=\" margin-top:80px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Agency FB\',\'serif\'; font-size:20pt; font-weight:600;\">Application Knowledge Graph</span> </p>\n"
"<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Agency FB\',\'serif\'; font-size:15pt;\"><br /></p>\n"
"<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Agency FB\',\'serif\'; font-size:15pt;\">Basic Morphological Classification references the classification indices in the </span><span style=\" font-family:\'Agency FB\',\'serif\'; font-size:15pt; font-weight:600; text-decoration: underline; color:rgb(15,59,46);\">Digital Geomorphological Classification System of China</span><span style=\" font-family:\'Agency FB\',\'serif\'; font-size:15pt;\"> (R: relief; A: altitude) to categorize the basic morphological landforms.</span> </p>\n"
"<p align=\"justify\" style=\" margin-top:0px; margin-bottom:20px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:-160px;\">          <img src=\":/pic/application.png\" width=\"752\" height=\"500\" /></p>\n"
"<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Agency FB\',\'serif\'; font-size:15pt;\">According to the constraints defined for the “application” concept in geo-computation ontology, a user needs to select the study region, study temporal feature, and granularity (such as resolution). For application - Basic Morphological Classification, </span><span style=\" font-family:\'Agency FB\',\'serif\'; font-size:15pt; font-weight:600;\">study region</span><span style=\" font-family:\'Agency FB\',\'serif\'; font-size:15pt;\">, and </span><span style=\" font-family:\'Agency FB\',\'serif\'; font-size:15pt; font-weight:600;\">resolution</span><span style=\" font-family:\'Agency FB\',\'serif\'; font-size:15pt;\"> need to be specified, no temporal feature is required. When user selects different regions and solutions, individual knowledge graphs of specified applications are generated.  </span> </p>\n"
"<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label_8.setText(_translate("Dialog", "Description"))
        self.label.setText(_translate("Dialog", "Please Select an Application:"))
        self.label_3.setText(_translate("Dialog", "Please Select Study Region:"))
        self.label_9.setText(_translate("Dialog", "*"))
        self.pushButton_2.setText(_translate("Dialog", "Save"))

        # self.pushButton_5.setText(_translate("Dialog", "Clear"))
        # self.pushButton_6.setText(_translate("Dialog", "Save"))
        # self.label_4.setText(_translate("Dialog", "Please Select Time Period:"))
        self.label_10.setText(_translate("Dialog", "Please Select Resolution:"))
        self.pushButton_3.setText(_translate("Dialog", "Next"))
        self.comboBox.setItemText(0, _translate("Dialog", "(None)"))
        self.comboBox.setItemText(1, _translate("Dialog", "Basic Morphological Classification"))
        self.comboBox.setItemText(2, _translate("Dialog", "Distribution of Population"))
        self.comboBox.setItemText(3, _translate("Dialog", "Annual Rainfall"))
        self.comboBox_2.setItemText(0, _translate("Dialog", "(None)"))
        self.comboBox_2.setItemText(1, _translate("Dialog", "30 meter"))
        self.comboBox_2.setItemText(2, _translate("Dialog", "90 meter"))
        self.comboBox_2.setItemText(3, _translate("Dialog", "250 meter"))
        # self.comboBox.currentIndexChanged.connect(self.on_combobox_changed)
# class Bridge(QObject):
#     @pyqtSlot(float, float, float, float)
#     def saveRectangleCoordinates(self, topLeftLat, topLeftLng, bottomRightLat, bottomRightLng):
#         # Process the received coordinates
#         print("Top Left Lat:", topLeftLat)
#         print("Top Left Lng:", topLeftLng)
#         print("Bottom Right Lat:", bottomRightLat)
#         print("Bottom Right Lng:", bottomRightLng)
#     @pyqtSlot()
#     def buttonClicked(self):
#         print("Save button clicked in HTML")
#
#     def __init__(self, url):
#         app = QApplication(sys.argv)
#         QWebEnginePage.__init__(self)
#         self.loadFinished.connect(self._loadFinished)
#
#         self._html = "http://localhost:63342/arcpy_project/Scripts/method/map.html?_ijt=30926svl4iabrjpeek6fq43dm9"
#
#         # username = "username"
#         # password = "password"
#         # base64string = QByteArray(("%s:%s" % (username, password)).encode()).toBase64()
#         # request = QWebEngineHttpRequest(QUrl.fromUserInput(url))
#         # request.setHeader(b"Authorization", b"Basic: %s" % (base64string,))
#
#         self.load(self._html)
#
#         app.exec_()
#     @property
#     def html(self):
#         return self._html
#
#     def _loadFinished(self):
#         self.toHtml(self.handle_to_html)
#
#     def handle_to_html(self, html):
#         self._html = html
#         QApplication.quit()
#
# def main():
#     url = "http://localhost:63342/arcpy_project/Scripts/method/map.html?_ijt=30926svl4iabrjpeek6fq43dm9"
#     r = BeautifulSoup.Render(url)
#     soup = BeautifulSoup(r.html, "html.parser")
#     for tag in soup.find_all("script", {"class": "topLeftInput"}):
#         print("=" * 50)
#         print(tag.text)

    def on_combobox_changed(self, index):
        self.task_selected_value = self.comboBox.currentText()
        # mp.Ui_model_page.label_a_result(self, selected_value)
        print("Selected application value:", self.task_selected_value)
        self.check_and_emit_task()

    def on_combobox2_changed(self, index):
        self.resolution_selected_value = self.comboBox_2.currentText()
        print("Selected spatial resolution value:", self.resolution_selected_value)
        self.check_and_emit_resolution()

    def check_and_emit_task(self):
        if hasattr(self, 'task_selected_value'):
            self.emit_task_ready()

    def check_and_emit_resolution(self):
        if hasattr(self, 'resolution_selected_value'):
            self.emit_resolution_ready()

    def emit_task_ready(self):
        try:
            # Obtain coordinates and emit the signal
            # //self.get_coordinates()
            # self.handle_top_left()
            # self.handle_bottom_right()
            # Assuming get_coordinates method retrieves coordinates
            # Emit the signal with appropriate arguments
            self.task_ready.emit(self.task_selected_value)
            print("Emitting task_ready signal")
        except Exception as e:
            print("Error emitting task_ready signal:", e)

    def emit_resolution_ready(self):
            try:
                # Obtain coordinates and emit the signal
                # //self.get_coordinates()
                # self.handle_top_left()
                # self.handle_bottom_right()
                # Assuming get_coordinates method retrieves coordinates
                # Emit the signal with appropriate arguments
                self.resolution_ready.emit(self.resolution_selected_value)
                print("Emitting task_ready signal")
            except Exception as e:
                print("Error emitting task_ready signal:", e)


class PopupWindow(QDialog):
    def __init__(self):
        super().__init__()

        self.setWindowTitle('Step 1: Analyse & Formalize Task')
        self.setWindowIcon(QIcon("dde.ico"))

        # Create a web engine view to display web content
        self.web_view = QWebEngineView()
        self.web_view.load(QUrl.fromLocalFile("D:/arcpy_project/Scripts/method/map.html"))
        self.web_view.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.web_view.resize(1060, 700)
        self.web_view.move(0, 0)
        # # Create a button to close the pop-up
        # close_button = QPushButton('Close')
        # close_button.clicked.connect(self.close)

        # Set up layout
        layout = QVBoxLayout()
        layout.addWidget(self.web_view)
        # layout.addWidget(close_button)

        self.setLayout(layout)


        # self.textBrowser_4 = QtWidgets.QFrame(Dialog)
        # self.textBrowser_4.setGeometry(QtCore.QRect(110, 395, 1060, 700))
        # self.textBrowser_4.setObjectName("textBrowser_4")
        # self.textBrowser_4.setStyleSheet("background-color: rgb(255, 255, 127);")
        # self.textBrowser_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        # self.textBrowser_4.setFrameShadow(QtWidgets.QFrame.Raised)
        # self.textBrowser_4.setLineWidth(9)
        # self.textBrowser_4.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        # # 27.293689224852407, 104.2218017578125
        # # 29.046565622728846, 102.4420166015625
        #
        # # self.web_page = MyWebPage(self.textBrowser_4)
        # self.web_view = QtWebEngineWidgets.QWebEngineView(self.textBrowser_4)
        # self.web_view.load(QUrl.fromLocalFile("D:/arcpy_project/Scripts/method/map.html"))
        # self.web_view.resize(1060, 700)
        # self.web_view.move(0, 0)
        #
        # #
        # # # Add content to the pop-up window
        # # label = QLabel('This is a pop-up window')
        # # ok_button = QPushButton('OK')
        # # ok_button.clicked.connect(self.accept)
        # #
        # # layout = QVBoxLayout()
        # # layout.addWidget(label)
        # # layout.addWidget(ok_button)
        # #
        # # self.setLayout(layout)



import application_rc

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_application_page()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
