# # # # # # -*- coding: utf-8 -*-
# # # # #
# # # # # # Form implementation generated from reading ui file 'D:/QT/application_setting.ui'
# # # # # #
# # # # # # Created by: PyQt5 UI code generator 5.15.9
# # # # # #
# # # # # # WARNING: Any manual changes made to this file will be lost when pyuic5 is
# # # # # # run again.  Do not edit this file unless you know what you are doing.
# # # # #
# # # # # from PyQt5 import QtWebEngineWidgets
# # # # # from PyQt5 import QtCore, QtGui, QtWidgets
# # # # # import sys
# # # # # from PyQt5.QtCore import *
# # # # # from PyQt5.QtGui import *
# # # # # from PyQt5.QtWidgets import *
# # # # # from PyQt5.QtWebEngineWidgets import *
# # # # #
# # # # #
# # # # # class Ui_Dialog(object):
# # # # #     def __init__(self):
# # # # #         # super(MainWindow, self).__init__()
# # # # #         # self.setWindowTitle('Geo Computation')
# # # # #         self.setGeometry(700,700,1520,1000)#窗口的初始位置和大小
# # # # #         self.browser=QWebEngineView() #加载本地html
# # # # #         self.browser.load(QUrl(QFileInfo("D:/arcpy_project/Scripts/method/map_test.html").absoluteFilePath()))
# # # # #         self.setCentralWidget(self.browser)
# # # # #
# # # # #
# # # # #
# # # # #     def setupUi(self, Dialog):
# # # # #         Dialog.setObjectName("Dialog")
# # # # #         Dialog.resize(2000, 1400)
# # # # #         self.textBrowser = QtWidgets.QTextBrowser(Dialog)
# # # # #
# # # # #         self.textBrowser.setGeometry(QtCore.QRect(0, 0, 1200, 1400))
# # # # #         self.textBrowser.setStyleSheet("background-color: rgb(255, 255, 255);")
# # # # #         self.textBrowser.setObjectName("textBrowser")
# # # # #
# # # # #         self.label_2 = QtWidgets.QLabel(Dialog)
# # # # #         self.label_2.setGeometry(QtCore.QRect(100, 100, 421, 51))
# # # # #         self.label_2.setStyleSheet("font: 75 20pt \"Agency FB\";\n"
# # # # # "\n"
# # # # # "")
# # # # #         self.label_2.setObjectName("label_2")
# # # # #
# # # # #
# # # # #         self.label_6 = QtWidgets.QLabel(Dialog)
# # # # #         self.label_6.setGeometry(QtCore.QRect(530, 100, 421, 51))
# # # # #         self.label_6.setStyleSheet("font: 75 20pt \"Agency FB\";\n"
# # # # # "color: rgb(188, 188, 188);\n"
# # # # # "color: rgb(191, 191, 191);\n"
# # # # # "\n"
# # # # # "")
# # # # #         self.label_6.setObjectName("label_6")
# # # # #
# # # # #         self.label_7 = QtWidgets.QLabel(Dialog)
# # # # #         self.label_7.setGeometry(QtCore.QRect(900, 100, 421, 51))
# # # # #         self.label_7.setStyleSheet("font: 75 20pt \"Agency FB\";\n"
# # # # # "color: rgb(188, 188, 188);\n"
# # # # # "color: rgb(191, 191, 191);\n"
# # # # # "\n"
# # # # # "")
# # # # #         self.label_7.setObjectName("label_7")
# # # # #
# # # # #         self.label_5 = QtWidgets.QLabel(Dialog)
# # # # #         self.label_5.setGeometry(QtCore.QRect(100, 180, 421, 51))
# # # # #         self.label_5.setStyleSheet("font: 75 20pt \"Agency FB\";\n"
# # # # # "color: rgb(255, 0, 0);")
# # # # #         self.label_5.setObjectName("label_5")
# # # # #
# # # # #         self.textBrowser_2 = QtWidgets.QTextBrowser(Dialog)
# # # # #         self.textBrowser_2.setGeometry(QtCore.QRect(1200, 0, 2000, 1400))
# # # # #         self.textBrowser_2.setObjectName("textBrowser_2")
# # # # #
# # # # #         self.label_8 = QtWidgets.QLabel(Dialog)
# # # # #         self.label_8.setGeometry(QtCore.QRect(660, 0, 421, 51))
# # # # #         self.label_8.setStyleSheet("font: 75 15pt \"Agency FB\";\n"
# # # # # "color: rgb(0, 0, 0);\n"
# # # # # "\n"
# # # # # "")
# # # # #         self.label_8.setObjectName("label_8")
# # # # #
# # # # #         self.line = QtWidgets.QFrame(Dialog)
# # # # #         self.line.setGeometry(QtCore.QRect(660, 50, 421, 16))
# # # # #         self.line.setFrameShape(QtWidgets.QFrame.HLine)
# # # # #         self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
# # # # #         self.line.setObjectName("line")
# # # # #
# # # # #         self.label = QtWidgets.QLabel(Dialog)
# # # # #         self.label.setGeometry(QtCore.QRect(120, 200, 421, 51))
# # # # #         self.label.setStyleSheet("font: 75 18pt \"Agency FB\";")
# # # # #         self.label.setObjectName("label")
# # # # #
# # # # #         self.label_3 = QtWidgets.QLabel(Dialog)
# # # # #         self.label_3.setGeometry(QtCore.QRect(120, 310, 421, 51))
# # # # #         self.label_3.setStyleSheet("font: 75 18pt \"Agency FB\";")
# # # # #         self.label_3.setObjectName("label_3")
# # # # #
# # # # #         self.label_9 = QtWidgets.QLabel(Dialog)
# # # # #         self.label_9.setEnabled(True)
# # # # #         self.label_9.setGeometry(QtCore.QRect(100, 300, 421, 51))
# # # # #         self.label_9.setStyleSheet("font: 75 20pt \"Agency FB\";\n"
# # # # # "color: rgb(255, 0, 0);")
# # # # #         self.label_9.setObjectName("label_9")
# # # # #
# # # # #         # self.textBrowser_4 = QtWebEngineWidgets.QWebEngineView(self)
# # # # #         # self.textBrowser_4.setGeometry(QtCore.QRect(120, 395, 920, 550))
# # # # #         # # self.textBrowser_4.setObjectName("textBrowser_4")
# # # # #         # layout = QVBoxLayout()
# # # # #         # # self.textBrowser_4.setHtml(map_html)
# # # # #         # # # self.browser = QWebEngineView()  # 加载本地html
# # # # #         # self.textBrowser_4.load(QUrl(QFileInfo("D:/arcpy_project/Scripts/method/map_test.html").absoluteFilePath()))
# # # # #         # # # self.setCentralWidget(self.browser)
# # # # #         # # layout.addWidget(self.browser)
# # # # #         #
# # # # #         # # Set the layout for the custom widget
# # # # #         # # self.setLayout(layout)
# # # # #
# # # # #
# # # # #         self.pushButton_2 = QtWidgets.QPushButton(Dialog)
# # # # #         self.pushButton_2.setGeometry(QtCore.QRect(1070, 420, 100, 40))
# # # # #         self.pushButton_2.setStyleSheet("font: 75 15pt \"Agency FB\";")
# # # # #         self.pushButton_2.setObjectName("pushButton_2")
# # # # #
# # # # #         self.pushButton_5 = QtWidgets.QPushButton(Dialog)
# # # # #         self.pushButton_5.setGeometry(QtCore.QRect(1070, 650, 100 ,40))
# # # # #         self.pushButton_5.setStyleSheet("font: 75 15pt \"Agency FB\";")
# # # # #         self.pushButton_5.setObjectName("pushButton_5")
# # # # #
# # # # #         self.pushButton_6 = QtWidgets.QPushButton(Dialog)
# # # # #         self.pushButton_6.setGeometry(QtCore.QRect(1070, 880, 100, 40))
# # # # #         self.pushButton_6.setStyleSheet("font: 75 15pt \"Agency FB\";")
# # # # #         self.pushButton_6.setObjectName("pushButton_6")
# # # # #
# # # # #         self.label_4 = QtWidgets.QLabel(Dialog)
# # # # #         self.label_4.setGeometry(QtCore.QRect(120, 980, 421, 51))
# # # # #         self.label_4.setStyleSheet("font: 75 18pt \"Agency FB\";")
# # # # #         self.label_4.setObjectName("label_4")
# # # # #
# # # # #         self.label_10 = QtWidgets.QLabel(Dialog)
# # # # #         self.label_10.setGeometry(QtCore.QRect(120, 1080, 421, 51))
# # # # #         self.label_10.setStyleSheet("font: 75 18pt \"Agency FB\";")
# # # # #         self.label_10.setObjectName("label_10")
# # # # #
# # # # #         self.calendarWidget = QtWidgets.QCalendarWidget(Dialog)
# # # # #         self.calendarWidget.setGeometry(QtCore.QRect(535, 980, 341, 78))
# # # # #         self.calendarWidget.setObjectName("calendarWidget")
# # # # #
# # # # #         self.pushButton_3 = QtWidgets.QPushButton(Dialog)
# # # # #         self.pushButton_3.setGeometry(QtCore.QRect(900, 1300, 152, 52))
# # # # #         self.pushButton_3.setStyleSheet("background-color: rgb(85, 170, 255);\n"
# # # # # "font: 75 20pt \"Agency FB\";")
# # # # #         self.pushButton_3.setObjectName("pushButton_3")
# # # # #
# # # # #         self.comboBox = QtWidgets.QComboBox(Dialog)
# # # # #         self.comboBox.setGeometry(QtCore.QRect(535, 200, 635, 65))
# # # # #         self.comboBox.setStyleSheet("font: 75 15pt \"Agency FB\";")
# # # # #         self.comboBox.setObjectName("comboBox")
# # # # #         self.comboBox.addItem("")
# # # # #         self.comboBox.addItem("")
# # # # #         self.comboBox.addItem("")
# # # # #         self.comboBox.addItem("")
# # # # #
# # # # #         self.comboBox_2 = QtWidgets.QComboBox(Dialog)
# # # # #         self.comboBox_2.setGeometry(QtCore.QRect(535, 1080, 401,65))
# # # # #         self.comboBox_2.setStyleSheet("font: 75 15pt \"Agency FB\";")
# # # # #         self.comboBox_2.setObjectName("comboBox_2")
# # # # #         self.comboBox_2.addItem("")
# # # # #         self.comboBox_2.addItem("")
# # # # #         self.comboBox_2.addItem("")
# # # # #         self.comboBox_2.addItem("")
# # # # #
# # # # #         self.retranslateUi(Dialog)
# # # # #         QtCore.QMetaObject.connectSlotsByName(Dialog)
# # # # #
# # # # #     def retranslateUi(self, Dialog):
# # # # #         _translate = QtCore.QCoreApplication.translate
# # # # #         Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
# # # # #         self.label_2.setText(_translate("Dialog", "Application Setting"))
# # # # #         self.label_6.setText(_translate("Dialog", "Model Setting"))
# # # # #         self.label_7.setText(_translate("Dialog", "Data Setting"))
# # # # #         self.label_5.setText(_translate("Dialog", "*"))
# # # # #         self.textBrowser_2.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
# # # # # "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
# # # # # "p, li { white-space: pre-wrap; }\n"
# # # # # "</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
# # # # # "<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
# # # # # "<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Times New Roman\',\'serif\'; font-size:18pt; font-weight:600;\"><br /></p>\n"
# # # # # "<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Times New Roman\',\'serif\'; font-size:18pt; font-weight:600;\"><br /></p>\n"
# # # # # "<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Times New Roman\',\'serif\'; font-size:18pt; font-weight:600;\">Application Knowledge Graph</span> </p>\n"
# # # # # "<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
# # # # # "<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Times New Roman\',\'serif\'; font-size:12pt;\"><br /></p>\n"
# # # # # "<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Times New Roman\',\'serif\'; font-size:12pt;\">Basic Morphological Classification references the classification indices in the </span><span style=\" font-family:\'Times New Roman\',\'serif\'; font-size:12pt; font-weight:600; text-decoration: underline; color:#ff0000;\">Digital Geomorphological Classification System of China</span><span style=\" font-family:\'Times New Roman\',\'serif\'; font-size:12pt;\"> (R: relief; A: altitude) to categorize the basic morphological landforms.</span> </p>\n"
# # # # # "<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">          <img src=\":/pic/application.png\" width=\"159\" height=\"259\" /></p>\n"
# # # # # "<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Times New Roman\',\'serif\'; font-size:12pt;\">According to the constraints defined for the “application” concept in geo-computation ontology, a user needs to select the study region, study temporal feature, and granularity (such as resolution). For application - Basic Morphological Classification, </span><span style=\" font-family:\'Times New Roman\',\'serif\'; font-size:12pt; font-weight:600;\">study region</span><span style=\" font-family:\'Times New Roman\',\'serif\'; font-size:12pt;\">, and </span><span style=\" font-family:\'Times New Roman\',\'serif\'; font-size:12pt; font-weight:600;\">resolution</span><span style=\" font-family:\'Times New Roman\',\'serif\'; font-size:12pt;\"> need to be specified, no temporal feature is required. When user selects different regions and solutions, individual knowledge graphs of specified applications are generated.  </span> </p>\n"
# # # # # "<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
# # # # #
# # # # #
# # # # #
# # # # #
# # # # #         self.label_8.setText(_translate("Dialog", "Description"))
# # # # #         self.label.setText(_translate("Dialog", "Please Select an Application:"))
# # # # #         self.label_3.setText(_translate("Dialog", "Please Select Study Region:"))
# # # # #         self.label_9.setText(_translate("Dialog", "*"))
# # # # #         self.pushButton_2.setText(_translate("Dialog", "Start"))
# # # # #         self.pushButton_5.setText(_translate("Dialog", "Clear"))
# # # # #         self.pushButton_6.setText(_translate("Dialog", "Save"))
# # # # #         self.label_4.setText(_translate("Dialog", "Please Select Time Period:"))
# # # # #         self.label_10.setText(_translate("Dialog", "Please Select Resolution:"))
# # # # #         self.pushButton_3.setText(_translate("Dialog", "Next"))
# # # # #         self.comboBox.setItemText(0, _translate("Dialog", "(None)"))
# # # # #         self.comboBox.setItemText(1, _translate("Dialog", "Basic Morphological Classification"))
# # # # #         self.comboBox.setItemText(2, _translate("Dialog", "Distribution of Population"))
# # # # #         self.comboBox.setItemText(3, _translate("Dialog", "Annual Rainfall"))
# # # # #         self.comboBox_2.setItemText(0, _translate("Dialog", "(None)"))
# # # # #         self.comboBox_2.setItemText(1, _translate("Dialog", "30 meter"))
# # # # #         self.comboBox_2.setItemText(2, _translate("Dialog", "10 meter"))
# # # # #         self.comboBox_2.setItemText(3, _translate("Dialog", "100 meter"))
# # # # # import application_rc
# # # # #
# # # # #
# # # # # if __name__ == "__main__":
# # # # #     import sys
# # # # #     app = QtWidgets.QApplication(sys.argv)
# # # # #     Dialog = QtWidgets.QDialog()
# # # # #     ui = Ui_Dialog()
# # # # #     ui.setupUi(Dialog)
# # # # #     Dialog.show()
# # # # #     sys.exit(app.exec_())
# # # # #
# # # # #
# # # #
# # # #
# # # # import sys
# # # # from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QPushButton, QHBoxLayout, QVBoxLayout
# # # #
# # # # class MyWidget(QWidget):
# # # #     def __init__(self):
# # # #         super().__init__()
# # # #
# # # #         # 创建嵌套控件
# # # #         label1 = QLabel("Label 1")
# # # #         button1 = QPushButton("Button 1")
# # # #
# # # #         label2 = QLabel("Label 2")
# # # #         button2 = QPushButton("Button 2")
# # # #
# # # #         # 创建布局管理器
# # # #         hbox1 = QHBoxLayout()
# # # #         hbox1.addWidget(label1)
# # # #         hbox1.addWidget(button1)
# # # #
# # # #         hbox2 = QHBoxLayout()
# # # #         hbox2.addWidget(label2)
# # # #         hbox2.addWidget(button2)
# # # #
# # # #         vbox = QVBoxLayout()
# # # #         vbox.addLayout(hbox1)
# # # #         vbox.addLayout(hbox2)
# # # #
# # # #         # 创建 QWidget 控件，并将布局管理器添加到其中
# # # #         nested_widget = QWidget()
# # # #         nested_widget.setLayout(vbox)
# # # #
# # # #         # 创建主布局管理器，并将嵌套控件添加到其中
# # # #         main_layout = QVBoxLayout()
# # # #         main_layout.addWidget(nested_widget)
# # # #
# # # #         # 设置主布局管理器
# # # #         self.setLayout(main_layout)
# # # #
# # # # if __name__ == '__main__':
# # # #     app = QApplication(sys.argv)
# # # #     widget = MyWidget()
# # # #     widget.show()
# # # #     sys.exit(app.exec_())
# # #
# # #
# #
# #
# #
# #
# # #
# # # import sys
# # # from PyQt5.Qt import *;
# # # from PyQt5.QtWidgets import *;
# # # from PyQt5.QtCore import QUrl
# # # from PyQt5.QtGui import QIcon
# # # from PyQt5.QtWebEngineWidgets import QWebEngineView
# # # from PyQt5.QtWidgets import QMainWindow, QHBoxLayout, QPushButton, QMessageBox, QApplication
# # # if __name__ == "__main__":
# # #     app = QApplication(sys.argv)
# # #     # 主窗口
# # #     mainWin = QMainWindow()
# # #     mainWin.setGeometry(100, 100, 800, 800)
# # #     mainWin.setWindowTitle("nest windows")
# # #
# # #     # 右侧的widget 默认初始是win1 点击button切换
# # #     win1 = QWidget()
# # #     win1.browser = QWebEngineView()
# # #     win1.browser.setHtml('''fdfd''')
# # #     win1.setGeometry(500, 500, 400, 400)
# # #     win1.setStyleSheet("background-color:yellow;")
# # #
# # #     win2 = QWidget()
# # #     win2.setStyleSheet("background-color:white;")
# # #
# # #     # # centralWidget用来对mainWin进行布局
# # #     centralWidget = QWidget()
# # #     # # 水平布局 用来放左侧菜单栏与可变的widget
# # #     hbox = QHBoxLayout()
# # #     # # 垂直布局 用来放置切换widget的button
# # #     vboxLeft = QVBoxLayout()
# # #     # 两个button 用来切换右侧的 widget
# # #     btn1 = QPushButton("win1", centralWidget)
# # #     btn2 = QPushButton("win2", centralWidget)
# # #     #
# # #     # # 将两个button放入垂直布局中
# # #     vboxLeft.addWidget(btn1)
# # #     vboxLeft.addWidget(btn2)
# # #     #
# # #     # # hbox中加入垂直布局vboxLeft
# # #     hbox.addLayout(vboxLeft)
# # #     # # hbox中加入默认的win1
# # #     hbox.addWidget(win1)
# # #
# # #     # btn1 btn2绑定点击事件
# # #     # 点击btn1 先将hbox中的第二个(下标为1)的控件的parent设置为None 再将hbox的下标1处插入一个我们希望显示的控件
# # #     btn1.clicked.connect(lambda: (hbox.itemAt(1).widget().setParent(None), hbox.insertWidget(1, win2)))
# # #     btn2.clicked.connect(lambda: (hbox.itemAt(1).widget().setParent(None), hbox.insertWidget(1, win1)))
# # #     # 将hbox布局设给centralWidget
# # #     centralWidget.setLayout(hbox)
# # #     # 将centralWidget设给mainWin
# # #     mainWin.setCentralWidget(centralWidget)
# # #
# # #     mainWin.show()
# # #
# # #     sys.exit(app.exec_())
# #
# #
# #
# #
# #
# #
# #
# #
# #
# #
# # # import os
# # # import sys
# # #
# # # from PyQt5.QtCore import QUrl
# # # from PyQt5.QtGui import QIcon
# # # from PyQt5.QtWebEngineWidgets import QWebEngineView
# # # from PyQt5.QtWidgets import QMainWindow, QHBoxLayout, QPushButton, QMessageBox, QApplication
# # #
# # # '''
# # # 显示嵌入的HTML网页 的案例
# # # '''
# # #
# # #
# # # class InnerHtmlDemo(QMainWindow):
# # #
# # #     def __init__(self):
# # #         super().__init__()
# # #         self.initUI()
# # #
# # #     def initUI(self):
# # #         # 设置定位和左上角坐标
# # #         self.setGeometry(700,700,1520,1000)
# # #         # 设置窗口标题
# # #         self.setWindowTitle('显示嵌入的HTML网页 的演示')
# # #         # 设置窗口图标
# # #         # self.setWindowIcon(QIcon('../web.ico'))
# # #
# # #         self.browser = QWebEngineView()
# # #         self.browser.setHtml('''
# # # <!DOCTYPE html>
# # # <html>
# # #
# # # <head>
# # #     <title>Data Processing Webpage</title>
# # #     <link rel="stylesheet" href="styles.css">
# # #     <!-- Add the necessary map API scripts and styles here -->
# # #     <!-- Replace 'MAP_API_URL' with the URL of your map API -->
# # #     <script type="text/javascript" src="http://api.tianditu.gov.cn/api?v=4.0&tk=23a9a63f3a584ee405db4e1147945e1e"></script>
# # #     <style type="text/css">body,html{width:100%;height:100%;margin:0;font-family:"Microsoft YaHei"}#mapDiv{width :100%;height:400px}input,b,p{margin-left:5px;font-size:14px}</style>
# # #     <!--link href="MAP_API_URL/map-api.css" rel="stylesheet" />
# # #     <style>
# # #         #map-container {
# # #             width: 100%;
# # #             height: 300px;
# # #         }
# # #     </style-->
# # # </head>
# # #
# # # <body>
# # #     <h1>Data Processing Webpage</h1>
# # #
# # #     <!-- Step 1: View Map -->
# # #     <div id="step1">
# # # <!--        <h2>Step 1: View Map</h2>-->
# # # <!--        <div id="map-container">-->
# # # <!--	        <p>Map will be displayed here</p>-->
# # # 	    <body onLoad="onLoad()">
# # #         <div id="mapDiv">
# # #
# # #         </div>
# # # <!--        <div  >-->
# # # <!--	 <input type="button" value="开启" onClick="rectTool.open();"/>-->
# # # <!--	 <input type="button" value="清除" onClick="rectTool.clear();"/>-->
# # # <!--        <input type="button" value="关闭" onClick="rectTool.close();"/>-->
# # # <!--        <input type="button" value="get" onClick="rectTool.getRectangles();"/>-->
# # # <!--	 </div>-->
# # # <!--        </div>-->
# # # <!--        <button type="button" onclick="showStep2()">Next</button>-->
# # # <!--    </div>-->
# # #
# # # <!--    &lt;!&ndash; Step 2: Select from the List &ndash;&gt;-->
# # # <!--    <div id="step2" style="display: none;">-->
# # # <!--        <h2>Step 2: Select from the List</h2>-->
# # # <!--        <select id="dropdown">-->
# # # <!--            <option value="" disabled selected>Select an option...</option>-->
# # # <!--            <option value="option1">Option 1</option>-->
# # # <!--            <option value="option2">Option 2</option>-->
# # # <!--            <option value="option3">Option 3</option>-->
# # # <!--        </select>-->
# # # <!--        <button type="button" onclick="showStep1()">Previous</button>-->
# # # <!--        <button type="button" onclick="showStep3()">Next</button>-->
# # # <!--    </div>-->
# # #
# # # <!--    &lt;!&ndash; Step 3: Upload Data &ndash;&gt;-->
# # # <!--    <div id="step3" style="display: none;">-->
# # # <!--        <h2>Step 3: Upload Data</h2>-->
# # # <!--        <form id="upload-form">-->
# # # <!--            <input type="file" id="file-upload" name="data-file" accept=".csv, .txt">-->
# # # <!--            <button type="button" onclick="showStep2()">Previous</button>-->
# # # <!--            <button type="button" onclick="showStep4()">Next</button>-->
# # # <!--        </form>-->
# # # <!--    </div>-->
# # #
# # # <!--    &lt;!&ndash; Step 4: Process Data &ndash;&gt;-->
# # # <!--    <div id="step4" style="display: none;">-->
# # # <!--        <h2>Step 4: Process Data</h2>-->
# # # <!--        <button type="button" onclick="showStep3()">Previous</button>-->
# # # <!--        <button type="button" onclick="executeProcess()">Process Data</button>-->
# # # <!--    </div>-->
# # #
# # #     <script>
# # #         // Map initialization (replace this with your map API's initialization script)
# # #         // This script will create the map using your API
# # #         // Example:
# # #        var map, rectTool;;
# # #        var zoom = 8;
# # #        var lay;
# # #        var onlyMapLay;
# # #
# # #        function onLoad() {
# # #                     var imageURL = "http://t0.tianditu.gov.cn/img_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=23a9a63f3a584ee405db4e1147945e1e";
# # #                     lay = new T.TileLayer(imageURL, {minZoom: 1, maxZoom: 18});
# # #                     var config = {layers: [lay]};
# # #                     map = new T.Map("mapDiv", config);
# # #                     map.centerAndZoom(new T.LngLat(116.40969, 39.89945), zoom);
# # #                     map.enableScrollWheelZoom();
# # #                     rectTool = new T.RectangleTool(map);
# # #                     getMapBounds();
# # #                 }
# # #          function getMapBounds() {
# # #             var rt = rectTool.getRectangles();
# # #             var bs = rt.getLngLats();   	//获取可视区域
# # #             var bssw = bs.getSouthWest();   //可视区域左下角
# # #             var bsne = bs.getNorthEast();   //可视区域右上角
# # #             alert("当前地图可视范围是：" + bssw.getLng() + "," + bssw.getLat() + "到" + bsne.getLng() + "," + bsne.getLat());}
# # #         function showStep1() {
# # #             document.getElementById("step2").style.display = "none";
# # #             document.getElementById("step3").style.display = "none";
# # #             document.getElementById("step4").style.display = "none";
# # #             document.getElementById("step1").style.display = "block";
# # #         }
# # #
# # #         function showStep2() {
# # #             document.getElementById("step1").style.display = "none";
# # #             document.getElementById("step3").style.display = "none";
# # #             document.getElementById("step4").style.display = "none";
# # #             document.getElementById("step2").style.display = "block";
# # #         }
# # #
# # #         function showStep3() {
# # #             document.getElementById("step1").style.display = "none";
# # #             document.getElementById("step2").style.display = "none";
# # #             document.getElementById("step4").style.display = "none";
# # #             document.getElementById("step3").style.display = "block";
# # #         }
# # #
# # #         function showStep4() {
# # #             document.getElementById("step1").style.display = "none";
# # #             document.getElementById("step2").style.display = "none";
# # #             document.getElementById("step3").style.display = "none";
# # #             document.getElementById("step4").style.display = "block";
# # #         }
# # #
# # #         function executeProcess() {
# # #             // Get the uploaded file and selected option
# # #             const fileInput = document.getElementById('file-upload');
# # #             const selectedOption = document.getElementById('dropdown').value;
# # #
# # #             // Perform processing (you can add your logic here)
# # #             console.log('File:', fileInput.files[0]);
# # #             console.log('Selected Option:', selectedOption);
# # #
# # #             // Show a message or redirect to the processing page
# # #             alert('Data processing completed!');
# # #         }
# # #
# # #         // Initialize the map when the page loads
# # #         window.onload = onLoad;
# # #     </script>
# # # </body>
# # #
# # # </html>
# # #
# # #         ''')
# # #         self.setCentralWidget(self.browser)
# # #
# # #
# # # if __name__ == '__main__':
# # #     app = QApplication(sys.argv)
# # #     # 设置应用图标
# # #     app.setWindowIcon(QIcon('../web.ico'))
# # #     w = InnerHtmlDemo()
# # #     w.show()
# # #     sys.exit(app.exec_())
# #
# #
# # import sys
# # from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget
# # from PyQt5.QtWebEngineWidgets import QWebEngineView
# #
# # class HTMLViewer(QMainWindow):
# #     def __init__(self):
# #         super().__init__()
# #         self.setWindowTitle("HTML Viewer")
# #         # self.setGeometry(300, 300, 1800, 1000)
# #
# #         # Create a central widget and set it as the main window's central widget
# #         central_widget = QWidget(self)
# #         self.setCentralWidget(central_widget)
# #
# #         # Create a layout for the central widget
# #         layout = QVBoxLayout(central_widget)
# #
# #         # Create a QWebEngineView widget to display the HTML content
# #         self.web_view = QWebEngineView(central_widget)
# #         layout.addWidget(self.web_view)
# #
# #         # Load and display HTML content
# #         html_content = """
# #        <!DOCTYPE html>
# # <html>
# #
# # <head>
# #     <title>Data Processing Webpage</title>
# #     <link rel="stylesheet" href="styles.css">
# #     <!-- Add the necessary map API scripts and styles here -->
# #     <!-- Replace 'MAP_API_URL' with the URL of your map API -->
# #     <script type="text/javascript" src="http://api.tianditu.gov.cn/api?v=4.0&tk=23a9a63f3a584ee405db4e1147945e1e"></script>
# #     <style type="text/css">body,html{width:100%;height:100%;margin:0;font-family:"Microsoft YaHei"}#mapDiv{width :100%;height:400px}input,b,p{margin-left:5px;font-size:14px}</style>
# #     <!--link href="MAP_API_URL/map-api.css" rel="stylesheet" />
# #     <style>
# #         #map-container {
# #             width: 100%;
# #             height: 300px;
# #         }
# #     </style-->
# # </head>
# #
# # <body>
# #     <h1>Data Processing Webpage</h1>
# #
# #     <!-- Step 1: View Map -->
# #     <div id="step1">
# # <!--        <h2>Step 1: View Map</h2>-->
# # <!--        <div id="map-container">-->
# # <!--	        <p>Map will be displayed here</p>-->
# # 	    <body onLoad="onLoad()">
# #         <div id="mapDiv">
# #
# #         </div>
# # <!--        <div  >-->
# # <!--	 <input type="button" value="开启" onClick="rectTool.open();"/>-->
# # <!--	 <input type="button" value="清除" onClick="rectTool.clear();"/>-->
# # <!--        <input type="button" value="关闭" onClick="rectTool.close();"/>-->
# # <!--        <input type="button" value="get" onClick="rectTool.getRectangles();"/>-->
# # <!--	 </div>-->
# # <!--        </div>-->
# # <!--        <button type="button" onclick="showStep2()">Next</button>-->
# # <!--    </div>-->
# #
# # <!--    &lt;!&ndash; Step 2: Select from the List &ndash;&gt;-->
# # <!--    <div id="step2" style="display: none;">-->
# # <!--        <h2>Step 2: Select from the List</h2>-->
# # <!--        <select id="dropdown">-->
# # <!--            <option value="" disabled selected>Select an option...</option>-->
# # <!--            <option value="option1">Option 1</option>-->
# # <!--            <option value="option2">Option 2</option>-->
# # <!--            <option value="option3">Option 3</option>-->
# # <!--        </select>-->
# # <!--        <button type="button" onclick="showStep1()">Previous</button>-->
# # <!--        <button type="button" onclick="showStep3()">Next</button>-->
# # <!--    </div>-->
# #
# # <!--    &lt;!&ndash; Step 3: Upload Data &ndash;&gt;-->
# # <!--    <div id="step3" style="display: none;">-->
# # <!--        <h2>Step 3: Upload Data</h2>-->
# # <!--        <form id="upload-form">-->
# # <!--            <input type="file" id="file-upload" name="data-file" accept=".csv, .txt">-->
# # <!--            <button type="button" onclick="showStep2()">Previous</button>-->
# # <!--            <button type="button" onclick="showStep4()">Next</button>-->
# # <!--        </form>-->
# # <!--    </div>-->
# #
# # <!--    &lt;!&ndash; Step 4: Process Data &ndash;&gt;-->
# # <!--    <div id="step4" style="display: none;">-->
# # <!--        <h2>Step 4: Process Data</h2>-->
# # <!--        <button type="button" onclick="showStep3()">Previous</button>-->
# # <!--        <button type="button" onclick="executeProcess()">Process Data</button>-->
# # <!--    </div>-->
# #
# #     <script>
# #         // Map initialization (replace this with your map API's initialization script)
# #         // This script will create the map using your API
# #         // Example:
# #        var map, rectTool;;
# #        var zoom = 8;
# #        var lay;
# #        var onlyMapLay;
# #
# #        function onLoad() {
# #                     var imageURL = "http://t0.tianditu.gov.cn/img_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={y}&TILECOL={x}&tk=23a9a63f3a584ee405db4e1147945e1e";
# #                     lay = new T.TileLayer(imageURL, {minZoom: 1, maxZoom: 18});
# #                     var config = {layers: [lay]};
# #                     map = new T.Map("mapDiv", config);
# #                     map.centerAndZoom(new T.LngLat(116.40969, 39.89945), zoom);
# #                     map.enableScrollWheelZoom();
# #                     rectTool = new T.RectangleTool(map);
# #                     getMapBounds();
# #                 }
# #          function getMapBounds() {
# #             var rt = rectTool.getRectangles();
# #             var bs = rt.getLngLats();   	//获取可视区域
# #             var bssw = bs.getSouthWest();   //可视区域左下角
# #             var bsne = bs.getNorthEast();   //可视区域右上角
# #             alert("当前地图可视范围是：" + bssw.getLng() + "," + bssw.getLat() + "到" + bsne.getLng() + "," + bsne.getLat());}
# #         function showStep1() {
# #             document.getElementById("step2").style.display = "none";
# #             document.getElementById("step3").style.display = "none";
# #             document.getElementById("step4").style.display = "none";
# #             document.getElementById("step1").style.display = "block";
# #         }
# #
# #         function showStep2() {
# #             document.getElementById("step1").style.display = "none";
# #             document.getElementById("step3").style.display = "none";
# #             document.getElementById("step4").style.display = "none";
# #             document.getElementById("step2").style.display = "block";
# #         }
# #
# #         function showStep3() {
# #             document.getElementById("step1").style.display = "none";
# #             document.getElementById("step2").style.display = "none";
# #             document.getElementById("step4").style.display = "none";
# #             document.getElementById("step3").style.display = "block";
# #         }
# #
# #         function showStep4() {
# #             document.getElementById("step1").style.display = "none";
# #             document.getElementById("step2").style.display = "none";
# #             document.getElementById("step3").style.display = "none";
# #             document.getElementById("step4").style.display = "block";
# #         }
# #
# #         function executeProcess() {
# #             // Get the uploaded file and selected option
# #             const fileInput = document.getElementById('file-upload');
# #             const selectedOption = document.getElementById('dropdown').value;
# #
# #             // Perform processing (you can add your logic here)
# #             console.log('File:', fileInput.files[0]);
# #             console.log('Selected Option:', selectedOption);
# #
# #             // Show a message or redirect to the processing page
# #             alert('Data processing completed!');
# #         }
# #
# #         // Initialize the map when the page loads
# #         window.onload = onLoad;
# #     </script>
# # </body>
# #
# # </html>
# #
# #         """
# #         self.web_view.setHtml(html_content)
# #         self.web_view.resize(100, 100)
# #         self.web_view.move(400, 500)
# #
# # if __name__ == "__main__":
# #     app = QApplication(sys.argv)
# #     viewer = HTMLViewer()
# #     viewer.show()
# #     sys.exit(app.exec_())
# #
# #
# #
#
# #calculator
#
#
#
import sys
from PyQt5.QtWidgets import (QWidget, QGridLayout,
                             QPushButton, QApplication, QLabel)


class Calculator(QWidget):

    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        grid = QGridLayout()
        self.setLayout(grid)

        label1 = QLabel("expression: ")
        grid.addWidget(label1, 0, 0)

        self.expression_label = QLabel("")
        grid.addWidget(self.expression_label, 0, 1)

        label2 = QLabel("result: ")
        grid.addWidget(label2, 0, 2)

        self.result_label = QLabel("")
        grid.addWidget(self.result_label, 0, 3)

        button_Clr = QPushButton("Clr")
        grid.addWidget(button_Clr, 1, 0)
        button_Clr.clicked.connect(self.Clear)

        button_leftbracket = QPushButton("(")
        grid.addWidget(button_leftbracket, 1, 1)
        button_leftbracket.clicked.connect(self.LeftBracket)

        button_rightbracket = QPushButton(")")
        grid.addWidget(button_rightbracket, 1, 2)
        button_rightbracket.clicked.connect(self.rightBracket)

        button_Bck = QPushButton("Bck")
        grid.addWidget(button_Bck, 1, 3)
        button_Bck.clicked.connect(self.Backspace)

        button_7 = QPushButton("7")
        grid.addWidget(button_7, 2, 0)
        button_7.clicked.connect(self.Append7)

        button_8 = QPushButton("8")
        grid.addWidget(button_8, 2, 1)
        button_8.clicked.connect(self.Append8)

        button_9 = QPushButton("9")
        grid.addWidget(button_9, 2, 2)
        button_9.clicked.connect(self.Append9)

        button_div = QPushButton("/")
        grid.addWidget(button_div, 2, 3)
        button_div.clicked.connect(self.AppendDiv)

        button_4 = QPushButton("4")
        grid.addWidget(button_4, 3, 0)
        button_4.clicked.connect(self.Append4)

        button_5 = QPushButton("5")
        grid.addWidget(button_5, 3, 1)
        button_5.clicked.connect(self.Append5)

        button_6 = QPushButton("6")
        grid.addWidget(button_6, 3, 2)
        button_6.clicked.connect(self.Append6)

        button_mul = QPushButton("*")
        grid.addWidget(button_mul, 3, 3)
        button_mul.clicked.connect(self.AppendMul)

        button_1 = QPushButton("1")
        grid.addWidget(button_1, 4, 0)
        button_1.clicked.connect(self.Append1)

        button_2 = QPushButton("2")
        grid.addWidget(button_2, 4, 1)
        button_2.clicked.connect(self.Append2)

        button_3 = QPushButton("3")
        grid.addWidget(button_3, 4, 2)
        button_3.clicked.connect(self.Append3)

        button_minus = QPushButton("-")
        grid.addWidget(button_minus, 4, 3)
        button_minus.clicked.connect(self.AppendMinus)

        button_0 = QPushButton("0")
        grid.addWidget(button_0, 5, 1)
        button_0.clicked.connect(self.Append0)

        button_equ = QPushButton("=")
        grid.addWidget(button_equ, 5, 2)
        button_equ.clicked.connect(self.Calculate)

        button_add = QPushButton("+")
        grid.addWidget(button_add, 5, 3)
        button_add.clicked.connect(self.AppendAdd)

        self.setGeometry(300, 300, 500, 200)
        self.setWindowTitle('Calculator')
        self.show()

    def Clear(self):
        self.expression_label.setText("")
        self.result_label.setText("")

    def LeftBracket(self):
        expression = self.expression_label.text() + "("
        self.expression_label.setText(expression)

    def rightBracket(self):
        expression = self.expression_label.text() + ")"
        self.expression_label.setText(expression)

    def Backspace(self):
        expression = self.expression_label.text()
        length = len(expression)
        expression = expression[0:length - 1]
        self.expression_label.setText(expression)

    def Append7(self):
        expression = self.expression_label.text() + "7"
        self.expression_label.setText(expression)

    def Append8(self):
        expression = self.expression_label.text() + "8"
        self.expression_label.setText(expression)

    def Append9(self):
        expression = self.expression_label.text() + "9"
        self.expression_label.setText(expression)

    def AppendDiv(self):
        expression = self.expression_label.text() + "/"
        self.expression_label.setText(expression)

    def Append4(self):
        expression = self.expression_label.text() + "4"
        self.expression_label.setText(expression)

    def Append5(self):
        expression = self.expression_label.text() + "5"
        self.expression_label.setText(expression)

    def Append6(self):
        expression = self.expression_label.text() + "6"
        self.expression_label.setText(expression)

    def AppendMul(self):
        expression = self.expression_label.text() + "*"
        self.expression_label.setText(expression)

    def Append1(self):
        expression = self.expression_label.text() + "1"
        self.expression_label.setText(expression)

    def Append2(self):
        expression = self.expression_label.text() + "2"
        self.expression_label.setText(expression)

    def Append3(self):
        expression = self.expression_label.text() + "3"
        self.expression_label.setText(expression)

    def AppendMinus(self):
        expression = self.expression_label.text() + "-"
        self.expression_label.setText(expression)

    def Append0(self):
        expression = self.expression_label.text() + "0"
        self.expression_label.setText(expression)

    def AppendAdd(self):
        expression = self.expression_label.text() + "+"
        self.expression_label.setText(expression)

    def OperatorPop(self):
        while len(self.operator_stack) != 0 and self.operator_stack[-1] != '(':
            operator = self.operator_stack.pop()
            number1 = self.number_stack.pop()
            number2 = self.number_stack.pop()
            number = 0
            if operator == '+':
                number = number2 + number1
            elif operator == '-':
                number = number2 - number1
            elif operator == '*':
                number = number2 * number1
            elif operator == '/':
                number = number2 / number1
            self.number_stack.append(number)

    def Calculate(self):
        # 这里要添加一个state，以记录前一个处理的类型，以处理负号
        # 遇到"-"，如果前一个处理的是operator，就将0压入数据栈
        state = "operator"
        priority = {"(": 1, "+": 2, "-": 2, "*": 3, "/": 4, ")": 5}
        length = len(self.expression_label.text())
        expression = self.expression_label.text()
        i = 0
        self.operator_stack = []
        self.number_stack = []
        while i < length:
            if (expression[i] >= '0' and expression[i] <= '9'):
                begin = i
                while i + 1 < length and expression[i + 1] >= '0' and expression[i + 1] <= '9':
                    i = i + 1
                end = i + 1
                number = int(expression[begin: end])
                self.number_stack.append(number)
                state = "number"
            elif (expression[i] == '('):
                self.operator_stack.append('(')
                state = "operator"
            elif (expression[i] == ')'):
                self.OperatorPop()
                self.operator_stack.pop()
                state = "operator"
            else:
                operator = expression[i]
                if operator == '-' and state == "operator":
                    self.number_stack.append(0)
                if len(self.operator_stack) > 0:
                    TopOperator = self.operator_stack[-1]
                    if priority[operator] <= priority[TopOperator]:
                        self.OperatorPop()
                self.operator_stack.append(operator)
                state = "operator"
            i = i + 1
        self.OperatorPop()
        number = self.number_stack[-1]
        self.result_label.setText(str(number))


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = Calculator()
    sys.exit(app.exec_())



#
# from PyQt5.Qt import *
# import sys
#
# app = QApplication(sys.argv)
#
# w = QWidget()
# w.setWindowTitle("QFrame")
# w.resize(300, 300)
#
# fra = QFrame(w)
# fra.resize(30,20)
# fra.setStyleSheet("border-color: rgb(0, 0, 127)")
#
# fra.setLineWidth(1)                          #设置外线宽度
# fra.setMidLineWidth(1)                       #设置中线宽度
# fra.setFrameStyle(QFrame.Panel|QFrame.Plain) #根据延时表参数写入
#
# w.show()
#
# if __name__ == '__main__':
#     sys.exit(app.exec_())



