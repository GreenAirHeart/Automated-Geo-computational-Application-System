# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:/QT/application_setting.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import re

from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtWebEngineWidgets import *
from expected_DEM import replace_extent_coordinates
from similarity_calculation import similarity,process_folder
import os

class Ui_data_page(object):
    data_ready = QtCore.pyqtSignal(str)

    def setupUi(self, Dialog):
        Dialog.setObjectName("Automatic Geomorphological Classification Tool")
        Dialog.setWindowIcon(QIcon("dde.ico"))
        Dialog.resize(2000, 1400)
        Dialog.setWindowFlag(Qt.WindowMinimizeButtonHint)
        # whole page
        self.textBrowser = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser.setGeometry(QtCore.QRect(0, 0, 1200, 1400))
        self.textBrowser.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textBrowser.setObjectName("textBrowser")

      # application_label
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(100, 100, 421, 51))
        self.label_2.setStyleSheet("font: 75 20pt \"Agency FB\";\n""color: rgb(188, 188, 188);\n""color: rgb(191, 191, 191);\n""\n""")
        self.label_2.setObjectName("label_2")


       # model_label
        self.label_6 = QtWidgets.QLabel(Dialog)
        self.label_6.setGeometry(QtCore.QRect(530, 100, 421, 51))
        self.label_6.setStyleSheet("font: 75 20pt \"Agency FB\";\n""color: rgb(188, 188, 188);\n""color: rgb(191, 191, 191);\n""\n""")
        self.label_6.setObjectName("label_6")


       #data_label
        self.label_7 = QtWidgets.QLabel(Dialog)
        self.label_7.setGeometry(QtCore.QRect(900, 100, 421, 51))
        self.label_7.setStyleSheet("font: 75 20pt \"Agency FB\";\n""\n""")
        self.label_7.setObjectName("label_7")





        #introduction part
        self.textBrowser_2 = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser_2.setGeometry(QtCore.QRect(1200, 0, 800, 1400))
        self.textBrowser_2.setObjectName("textBrowser_2")

        self.label_8 = QtWidgets.QLabel(Dialog)
        self.label_8.setGeometry(QtCore.QRect(1200, 55, 421, 51))
        self.label_8.setStyleSheet("font: 75 18pt \"Agency FB\";\n""color: rgb(0, 0, 0);\n""\n""")
        self.label_8.setObjectName("label_8")

        self.line = QtWidgets.QFrame(Dialog)
        self.line.setGeometry(QtCore.QRect(1200, 150, 800, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")


        #label 1
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(65, 200, 421, 51))
        self.label.setStyleSheet("font: 75 18pt \"Agency FB\";")
        self.label.setObjectName("label")



       #label1 *
        self.label_9 = QtWidgets.QLabel(Dialog)
        self.label_9.setEnabled(True)
        self.label_9.setGeometry(QtCore.QRect(50, 200, 421, 51))
        self.label_9.setStyleSheet("font: 75 20pt \"Agency FB\";\n""color: rgb(255, 0, 0);")
        self.label_9.setObjectName("label_9")

        # label 2
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(95, 900, 421, 51))
        self.label_4.setStyleSheet("color: rgb(0, 0, 0);\n""font: 75 18pt \"Agency FB\";")
        self.label_4.setObjectName("label_4")

        self.label_5 = QtWidgets.QLabel(Dialog)
        self.label_5.setGeometry(QtCore.QRect(95, 950, 621, 51))
        self.label_5.setStyleSheet("color: rgb(255, 255, 255);\n""font: 75 18pt \"Agency FB\";")
        self.label_5.setObjectName("label_5")
 


        # check box 1
        self.check_box_1 = QtWidgets.QCheckBox(Dialog)
        self.check_box_1.setGeometry(QtCore.QRect(65, 290, 300, 50))
        self.check_box_1.setStyleSheet("font: 75 10pt ;")
        self.check_box_1.setObjectName("checkbox_1")
        self.check_box_1.stateChanged.connect(self.check_data_1)
        # self.check_box_1.stateChanged.connect(self.handle_check_box_1)
        # self.check_box_1.setCheckable(False)
        # self.check_box_1.setChecked(True)




        # check box 1 LED
        self.check_box_LED_1 = QtWidgets.QLabel(Dialog)
        self.check_box_LED_1.setGeometry(QtCore.QRect(245, 293, 110, 45))
        self.check_box_LED_1.setStyleSheet("font: 75 15pt \"Agency FB\";\n""color: rgb(255, 85, 127);""border: 0.5px solid grey;")
        self.check_box_LED_1.setObjectName("checkbox_1_LED")

        # check box 2
        self.check_box_2 = QtWidgets.QCheckBox(Dialog)
        self.check_box_2.setGeometry(QtCore.QRect(455, 290, 960, 50))
        self.check_box_2.setStyleSheet("font: 75 9pt ;")
        self.check_box_2.setObjectName("checkbox_2")
        self.check_box_2.stateChanged.connect(self.check_data_2)
        # self.check_box_2.setCheckable(True)
        # self.check_box_2.setChecked(True)

        # check box 2 LED
        self.check_box_LED_2 = QtWidgets.QLabel(Dialog)
        self.check_box_LED_2.setGeometry(QtCore.QRect(635, 293, 110, 45))
        self.check_box_LED_2.setStyleSheet("font: 75 15pt \"Agency FB\";\n""color: rgb(255, 85, 127);""border: 0.5px solid grey;")
        self.check_box_LED_2.setObjectName("checkbox_2_LED")

        # check box 3
        self.check_box_3 = QtWidgets.QCheckBox(Dialog)
        self.check_box_3.setGeometry(QtCore.QRect(845, 290, 960, 50))
        self.check_box_3.setStyleSheet("font: 75 10pt ;")
        self.check_box_3.setObjectName("checkbox_3")
        self.check_box_3.stateChanged.connect(self.check_data_3)
        # self.check_box_3.setCheckable(True)
        # self.check_box_3.setChecked(True)

        # check box 3 LED
        self.check_box_LED_3 = QtWidgets.QLabel(Dialog)
        self.check_box_LED_3.setGeometry(QtCore.QRect(1025, 293, 110, 45))
        self.check_box_LED_3.setStyleSheet("font: 75 15pt \"Agency FB\";\n""color: rgb(255, 85, 127);""border: 0.5px solid grey;")
        self.check_box_LED_3.setObjectName("checkbox_3_LED")






        # upload check box 4
        self.check_box_4 = QtWidgets.QCheckBox(Dialog)
        self.check_box_4.setGeometry(QtCore.QRect(65, 900, 421, 51))
        self.check_box_4.setStyleSheet("font: 75 12pt ;")
        self.check_box_4.setObjectName("checkbox_4")
        self.check_box_4.setCheckable(True)
        self.check_box_4.stateChanged.connect(self.check)
 
        #browser 1
        self.textBrowser_4 = QtWidgets.QFrame(Dialog)
        self.textBrowser_4.setGeometry(QtCore.QRect(65, 390, 1070, 470))
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.textBrowser_4.setMidLineWidth(1)  # 设置中线宽度
        self.textBrowser_4.setFrameShadow(QFrame.Plain)  # 设置阴影效果：凸起
        self.textBrowser_4.setFrameShape(QFrame.Box)
        self.textBrowser_4.setLineWidth(1)


        self.textBrowser_r = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser_r.setGeometry(QtCore.QRect(66, 391, 1068, 469))
        self.textBrowser_r.setObjectName("textBrowser")





        #browser 2
        self.textBrowser_5 = QtWidgets.QFrame(Dialog)
        self.textBrowser_5.setGeometry(QtCore.QRect(65, 1000, 1070, 250))
        self.textBrowser_5.setObjectName("textBrowser_4")
        self.textBrowser_5.setMidLineWidth(1)  # 设置中线宽度
        self.textBrowser_5.setFrameShadow(QFrame.Plain)  # 设置阴影效果：凸起
        self.textBrowser_5.setFrameShape(QFrame.Box)
        self.textBrowser_5.setLineWidth(1)
        self.textBrowser_5.setStyleSheet("color: rgb(211, 211, 211)")



        #file path label
        self.file_path_label = QtWidgets.QLabel(Dialog)
        self.file_path_label.setGeometry(QtCore.QRect(120, 750, 421, 51))




        #upload button
        self.pushButton_1 = QtWidgets.QPushButton(Dialog)
        self.pushButton_1.setGeometry(QtCore.QRect(945, 900, 152, 52))
        self.pushButton_1.setStyleSheet("background-color: rgb(223, 223, 223);\n""font: 75 15pt \"Agency FB\";""color: rgb(211, 211, 211);")
        self.pushButton_1.setObjectName("pushButton_1")
        self.pushButton_1.setEnabled(False)
        self.pushButton_1.clicked.connect(self.upload_file)

        #file path
        self.file_path_label = QtWidgets.QLabel(Dialog)
        self.file_path_label.setGeometry(QtCore.QRect(550, 900, 421, 51))
        self.file_path_label.setStyleSheet("font: 75 15pt ;")

   
        #next button
        self.pushButton_3 = QtWidgets.QPushButton(Dialog)
        self.pushButton_3.setGeometry(QtCore.QRect(1030, 1300, 152, 52))
        self.pushButton_3.setStyleSheet("background-color: rgb(12, 59, 46);\n""font: 75 20pt \"Agency FB\";""color:white;")
        self.pushButton_3.setObjectName("pushButton_3")

        # previous button
        self.pushButton_4 = QtWidgets.QPushButton(Dialog)
        self.pushButton_4.setGeometry(QtCore.QRect(850, 1300, 152, 52))
        self.pushButton_4.setStyleSheet("background-color: rgb(12, 59, 46);\n""font: 75 20pt \"Agency FB\";""color:white;")
        self.pushButton_4.setObjectName("pushButton_4")

        # validation label
        self.label_validation = QtWidgets.QLabel(Dialog)
        self.label_validation.setGeometry(QtCore.QRect(75, 1000, 960, 50))
        self.label_validation.setStyleSheet("color: rgb(211, 211, 211);\n""font: 75 15pt \"Agency FB\";")
        self.label_validation.setObjectName("label_validation")


        # validation label result
        self.label_validation_result = QtWidgets.QLabel(Dialog)
        self.label_validation_result.setGeometry(QtCore.QRect(285, 1080, 960, 100))
        self.label_validation_result.setStyleSheet("font: 75 18pt \"Agency FB\";""color: rgb(211, 211, 211);")
        self.label_validation_result.setObjectName("label_validation_result")


        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        button_object_names = ["pushButton_1", "pushButton_4", "pushButton_3"]  # Add more button object names if needed

        for button_name in button_object_names:
            # Find the button by its object name
            button = getattr(self, button_name)
            if isinstance(button, QPushButton):
                # Set default cursor shape to arrow
                button.setCursor(Qt.ArrowCursor)

                # Connect signals to slots
                button.enterEvent = lambda event, button=button: self.changeCursorToHand(button)
                button.leaveEvent = lambda event, button=button: self.changeCursorToArrow(button)


    def changeCursorToHand(self, button):
      button.setCursor(Qt.PointingHandCursor)  # Change cursor to pointing hand when mouse enters button area


    def changeCursorToArrow(self, button):
      button.setCursor(Qt.ArrowCursor)

    def check_data_1(self):
        if self.check_box_1.isChecked():
            self.check_box_2.setCheckable(False)
            self.check_box_3.setCheckable(False)
            self.dataname1 = self.data1
            print("checked",self.dataname1)
            self.data_ready.emit(self.dataname1)

        if not self.check_box_1.isChecked():
            self.check_box_1.setCheckable(True)
            self.check_box_2.setCheckable(True)
            self.check_box_3.setCheckable(True)

    def check_data_2(self):
        if self.check_box_2.isChecked():
            self.check_box_1.setCheckable(False)
            self.check_box_3.setCheckable(False)
            self.dataname2 = self.data2
            print("checked", self.dataname2)
            self.data_ready.emit(self.dataname2)
        if not self.check_box_2.isChecked():
            self.check_box_1.setCheckable(True)
            self.check_box_2.setCheckable(True)
            self.check_box_3.setCheckable(True)

    def check_data_3(self):
        if self.check_box_3.isChecked():
            self.check_box_1.setCheckable(False)
            self.check_box_2.setCheckable(False)
            self.dataname3 = self.data3
            print("checked", self.dataname3)
            self.data_ready.emit(self.dataname3)
        if not self.check_box_3.isChecked():
            self.check_box_1.setCheckable(True)
            self.check_box_2.setCheckable(True)
            self.check_box_3.setCheckable(True)

    def check(self):
        if self.check_box_4.isChecked():
            # self.label_4.setStyleSheet("font: 75 20pt ;")
            self.textBrowser_4.setStyleSheet("color: rgb(211, 211, 211);")
            self.textBrowser_5.setStyleSheet("color: rgb(0, 0, 0);")

            self.textBrowser_r.setStyleSheet("color: rgb(211, 211, 211);")


            self.label.setStyleSheet("font: 75 18pt \"Agency FB\";\n""color: rgb(211, 211, 211);")
            self.label_9.setStyleSheet("font: 75 20pt \"Agency FB\";\n""color: rgb(211, 211, 211);")

            self.label_4.setStyleSheet("color: rgb(0, 0, 0);\n""font: 75 18pt \"Agency FB\";")
            self.label_5.setStyleSheet("color: rgb(255, 0, 0);\n""font: 75 18pt \"Agency FB\";")
            self.check_box_1.setStyleSheet("font: 75 12pt ;\n""color: rgb(211, 211, 211);")
            self.check_box_1.setCheckable(False)
            self.check_box_LED_1.setStyleSheet("font: 75 10pt \"Agency FB\";\n""color: rgb(211, 211, 211);")

            self.check_box_2.setStyleSheet("font: 75 12pt ;\n""color: rgb(211, 211, 211);")
            self.check_box_2.setCheckable(False)
            self.check_box_LED_2.setStyleSheet("font: 75 10pt \"Agency FB\";\n""color: rgb(211, 211, 211);")

            self.check_box_3.setStyleSheet("font: 75 12pt ;\n""color: rgb(211, 211, 211);")
            self.check_box_3.setCheckable(False)
            self.check_box_LED_3.setStyleSheet("font: 75 10pt \"Agency FB\";\n""color: rgb(211, 211, 211);")

            self.pushButton_1.setStyleSheet("background-color: rgb(109, 151, 115);\n""font: 75 15pt \"Agency FB\";""color:white")

            self.label_validation.setStyleSheet("color: rgb(0, 0, 0);\n""font: 75 15pt \"Agency FB\";")
            self.label_validation_result.setStyleSheet("font: 75 18pt \"Agency FB\";""color: rgb(255, 85, 127);")

            self.file_path_label.setStyleSheet("font: 75 15pt ;")

            self.pushButton_1.setEnabled(True)

        if not self.check_box_4.isChecked():
            # self.label_4.setStyleSheet("font: 75 15pt ;")
            self.textBrowser_4.setStyleSheet("color: rgb(0, 0, 0);")
            self.textBrowser_5.setStyleSheet("color: rgb(211, 211, 211);")
            self.textBrowser_r.setStyleSheet("color: rgb(0, 0, 0);")

            self.label.setStyleSheet("font: 75 18pt \"Agency FB\";\n""color: rgb(0, 0, 0);")
            self.label_9.setStyleSheet("font: 75 20pt \"Agency FB\";\n""color: rgb(255, 0, 0);")

            self.label_4.setStyleSheet("color: rgb(0, 0, 0);\n""font: 75 18pt \"Agency FB\";")
            self.label_5.setStyleSheet("color: rgb(255, 255, 255);\n""font: 75 18pt \"Agency FB\";")

            self.check_box_1.setStyleSheet("font: 75 12pt ;\n""color: rgb(0, 0, 0);")
            self.check_box_1.setCheckable(True)
            self.check_box_LED_1.setStyleSheet("font: 75 10pt \"Agency FB\";\n""color: rgb(255, 85, 127);")

            self.check_box_2.setStyleSheet("font: 75 12pt ;\n""color: rgb(0, 0, 0);")
            self.check_box_2.setCheckable(True)
            self.check_box_LED_2.setStyleSheet("font: 75 10pt \"Agency FB\";\n""color: rgb(255, 85, 127);")

            self.check_box_3.setStyleSheet("font: 75 12pt ;\n""color: rgb(0, 0, 0);")
            self.check_box_3.setCheckable(True)
            self.check_box_LED_3.setStyleSheet("font: 75 10pt \"Agency FB\";\n""color: rgb(255, 85, 127);")

            self.pushButton_1.setStyleSheet(
                "background-color: rgb(223, 223, 223);\n""font: 75 15pt \"Agency FB\";""color: rgb(211, 211, 211);")

            self.label_validation.setStyleSheet("color: rgb(211, 211, 211);\n""font: 75 15pt \"Agency FB\";")
            self.label_validation_result.setStyleSheet("font: 75 18pt \"Agency FB\";""color: rgb(211, 211, 211);")

            self.file_path_label.setStyleSheet("font: 75 15pt ;\n""color: rgb(211, 211, 211);")

            self.pushButton_1.setEnabled(False)

    def upload_file(self):
        _translate = QtCore.QCoreApplication.translate
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getOpenFileName(self, "Open File", "", "All Files (*);;Text Files (*.txt)",
                                                   options=options)
        if file_path:
            dname = file_path
            if '\\' in dname:
                while (dname.count('\\') > 0):
                    mun = dname.find('\\')
                    dname = dname.replace(dname[0:mun + 1], '')
            elif '/' in dname:
                dname = dname.replace('//', '/')
                while (dname.count('/') > 0):
                    mun = dname.find('/')
                    dname = dname.replace(dname[0:mun + 1], '')
            self.file_path_label.setText(_translate("Dialog", dname))

    def closeEvent(self, event):
        confirm = QMessageBox.question(
            self, "Confirm Close",
            "Are you sure you want to close the application?",
            QMessageBox.Yes | QMessageBox.No, QMessageBox.No
        )

        if confirm == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()


    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Automatic Geomorphological Classification Tool", "Automatic Geomorphological Classification Tool"))


   


        self.label_2.setText(_translate("Dialog", "Application Setting"))
        self.label_6.setText(_translate("Dialog", "Model Selecting"))
        self.label_7.setText(_translate("Dialog", "Data Matching"))
        self.label_validation.setText(_translate("Dialog", "Data Validation Result:"))
        self.label_validation_result.setText(_translate("Dialog", ""))
        # self.label_5.setText(_translate("Dialog", "*"))
        self.textBrowser_2.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:15pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
"<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Agency FB\',\'serif\'; font-size:18pt; font-weight:600;\"><br /></p>\n"
"<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Agency FB\',\'serif\'; font-size:18pt; font-weight:600;\"><br /></p>\n"
"<p align=\"justify\" style=\" margin-top:50px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Agency FB\',\'serif\'; font-size:20pt; font-weight:600;\">Data Knowledge Graph</span> </p>\n"
"<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:-50px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:\'Agency FB\',\'serif\'; font-size:15pt;\"><br /></p>\n"
"<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Agency FB\',\'serif\'; font-size:15pt;\">According to the application and model that are selected by the user, datasets are recommended by the system based on the application and model requirements. The recommended datasets are scored from high to low, and the higher the score, the more matchable the dataset is. The data ontology in geo-computation ontology is displayed below.  </span> </p>\n"
"<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:-160px;\">          <img src=\":/data/data.png\" width=\"520\" height=\"600\" /></p>\n"
"<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Agency FB\',\'serif\'; font-size:15pt;\">If the user has no faith in the recommended data, the system will allow the user to upload data. After the uploading, the system will validate the uploaded data and show the validation result. Based on the selected or uploaded data, the individual data knowledge graphs will be specified by referencing data ontology in geo-computation ontology. </span> </p>\n"
"<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label_8.setText(_translate("Dialog", "Description"))
        self.label.setText(_translate("Dialog", "Data Recommendation:"))
        # self.label_3.setText(_translate("Dialog", "Knowledge Graph:"))
        self.label_9.setText(_translate("Dialog", "*"))

        self.check_box_1.setText(_translate("Dialog", "Data_1"))
        self.check_box_LED_1.setText(_translate("Dialog", "Score_1"))

        self.check_box_2.setText(_translate("Dialog", "Data_2"))
        self.check_box_LED_2.setText(_translate("Dialog", "Score_2"))

        self.check_box_3.setText(_translate("Dialog", "Data_3"))
        self.check_box_LED_3.setText(_translate("Dialog", "Score_3"))

        self.textBrowser_r.setHtml(_translate("Dialog",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"richtext\" content=\"2\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "</style></head><body style=\" font-family:\'SimSun\'; font-size:15pt; font-weight:400; font-style:normal;\">\n"
                                            # "<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
                                            "<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Times New Roman\',\'serif\'; font-size:12pt;\"><b>FABDEM_30m</b>: Forest And Buildings removed Copernicus DEM (FABDEM) is a dataset with a grid spacing of 1 arc-second (~30 meters) and is the first digital elevation model dataset with both trees and buildings removed. The improved resolution and accuracy of FABDEM compared to existing global DEMs will benefit many applications where the representation of the terrain is important.\n <br><b>ASTER GDEM_30m</b>: Advanced Spaceborne Thermal Emission and Reflection Radiometer Global Digital Elevation Model (ASTER GDEM) with a global spatial resolution of 30 meters. The data are based on detailed observations from Terra, NASA's next-generation Earth observation satellite, and cover all land areas between latitudes 83°N and 83°S, reaching 99 percent of the Earth's land surface.\n <br><b>COP-DEM_30m</b>: The Copernicus Digital Elevation Model (COP-DEM) is a worldwide 30-meter resolution digital elevation model (DEM) published by the European Space Agency (ESA). The model is a Digital Surface Model (DSM) that represents the elevation of the Earth's surface, including buildings, infrastructure, and vegetation.</span> </p>\n"

                                            "<p align=\"justify\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))

        self.label_4.setText(_translate("Dialog", "Please Upload Your Data:"))
        self.label_5.setText(_translate("Dialog", "Reminder: Your Uploaded Data HAS to be DEM"))
        self.pushButton_1.setText(_translate("Dialog", "Upload"))
        self.pushButton_3.setText(_translate("Dialog", "Next"))
        self.pushButton_4.setText(_translate("Dialog", "Previous"))
  
    def update_label_with_coordinates(self, top_left, bottom_right):
        top_left_lat_coordinates1 = top_left.split(",")[0].split()
        lat_1 = top_left_lat_coordinates1[0]
        self.lat_1 = lat_1
        top_left_lon_coordinates1 = top_left.split(",")[1].split()
        lon_1 = top_left_lon_coordinates1[0]
        self.lon_1 = lon_1
        print(lat_1, lon_1)

        top_left_lat_coordinates2 = bottom_right.split(",")[0].split()
        lat_2 = top_left_lat_coordinates2[0]
        self.lat_2 = lat_2
        top_left_lon_coordinates2 = bottom_right.split(",")[1].split()
        lon_2 = top_left_lon_coordinates2[0]
        self.lon_2 = lon_2
        print(lat_2, lon_2)

    def update_label_with_resolution(self, value):
        print(value)  # This prints: '90 meter'
        parts = value.split()  # Split the string into parts based on whitespace
        numerical_part = parts[0]  # Extract the numerical part
        print("numerical_part:", numerical_part)  # This prints: '90'
        self.text = numerical_part

        # self.trigger_input.emit()
    def expected_INPUT1(self):
        with open('H:/DEM/expected_DEM/expected_DEM.ttl', 'r') as file:
            ttl_content = file.read()

 
        # Replace the extent coordinates placeholders
        extent_match = re.search(r'data:extent "(.*?)"\^\^geo:wktLiteral', ttl_content)
        if extent_match:
            extent = extent_match.group(1)
            extent_coordinates = {
                'a': self.lat_1,
                'b': self.lon_1,
                'c': self.lat_2,
                'd': self.lon_2
            }

 
        new_extent = replace_extent_coordinates(extent, extent_coordinates)

        # Replace the old extent with the new one in the TTL content
        new_ttl_content = ttl_content.replace(extent, new_extent)

        with open('H:/DEM/expected_DEM/expected_DEM1.ttl', 'w') as file:
            file.write(new_ttl_content)

    def expected_INPUT2(self):
        with open('H:/DEM/expected_DEM/expected_DEM1.ttl', 'r') as file:
            ttl_content = file.read()

     
        spatial_resolution_value=self.text
   
        ttl_content1 = ttl_content.replace('dcat:spatialResolutionInMeters e',
                                               f'dcat:spatialResolutionInMeters {spatial_resolution_value}')
    # Write the modified TTL content back to the file
        with open('H:/DEM/expected_DEM/expected_DEM2.ttl', 'w') as file:
              file.write(ttl_content1)
  

        a=process_folder("H:/DEM/data_graph/",'H:/DEM/expected_DEM/expected_DEM2.ttl')
        _translate = QtCore.QCoreApplication.translate
        self.check_box_LED_1.setText(_translate("Dialog", str(round(a[1]['score'],6))))
        self.check_box_LED_2.setText(_translate("Dialog", str(round(a[2]['score'], 6))))
        self.check_box_LED_3.setText(_translate("Dialog", str(round(a[3]['score'], 6))))
        self.check_box_1.setText(_translate("Dialog", a[1]['name']))
        self.check_box_2.setText(_translate("Dialog", a[2]['name']))
        self.check_box_3.setText(_translate("Dialog", a[3]['name']))
        self.data1=a[1]['name']
        self.data2 = a[2]['name']
        self.data3 = a[3]['name']
   

import data_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_data_page()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
