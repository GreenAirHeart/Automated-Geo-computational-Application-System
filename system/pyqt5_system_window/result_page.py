# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:/QT/application_setting.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtWebEngineWidgets import *


class Ui_result_page(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Automatic Geomorphological Classification Tool")
        Dialog.setWindowIcon(QIcon("dde.ico"))
        Dialog.resize(2000, 1400)
        # Dialog.resize(1200, 1400)
        Dialog.setWindowFlags(Qt.WindowMinimizeButtonHint | Qt.WindowCloseButtonHint)
        # whole page
        self.textBrowser = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser.setGeometry(QtCore.QRect(0, 0, 2000, 1400))
        # self.textBrowser.setGeometry(QtCore.QRect(0, 0, 1200, 1400))
        self.textBrowser.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textBrowser.setObjectName("textBrowser")


        # Set up the QLabel to display the image
        self.label = QtWidgets.QLabel(self.textBrowser)
        pixmap = QtGui.QPixmap('H:/DEM/app/test33.png')
        scaled_pixmap = pixmap.scaled(1000, 1000, QtCore.Qt.KeepAspectRatio)
        self.label.setPixmap(scaled_pixmap)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setGeometry(QtCore.QRect(250, 0, 1550, 1400))
   
        self.label_8 = QtWidgets.QLabel(Dialog)
        self.label_8.setGeometry(QtCore.QRect(1020, 55, 421, 51))
        self.label_8.setStyleSheet("font: 75 18pt \"Agency FB\";\n""color: rgb(0, 0, 0);\n""\n""")
        self.label_8.setObjectName("label_8")

       

        #label 1
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(80, 50, 700, 51))
        self.label.setStyleSheet("font: 75 20pt \"Agency FB\";")
        self.label.setObjectName("label")


        # label 2
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(80, 1245, 500, 51))
        self.label_4.setStyleSheet("font: 75 20pt \"Agency FB\";")
        self.label_4.setObjectName("label_4")

       
        #file path label
        self.file_path_label = QtWidgets.QLabel(Dialog)
        self.file_path_label.setGeometry(QtCore.QRect(120, 750, 421, 51))



        #file path
        self.file_path_label = QtWidgets.QLabel(Dialog)
        self.file_path_label.setGeometry(QtCore.QRect(550, 900, 421, 51))

      

        # download button
        self.pushButton_4 = QtWidgets.QPushButton(Dialog)
        self.pushButton_4.setGeometry(QtCore.QRect(963, 1250, 152, 52))
        self.pushButton_4.setStyleSheet("background-color: rgb(12, 59, 46);\n""font: 75 20pt \"Agency FB\";""color:white;")
        self.pushButton_4.setObjectName("pushButton_4")

  

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        button_object_names = ["pushButton_4"]  # Add more button object names if needed

        for button_name in button_object_names:
            # Find the button by its object name
            button = getattr(self, button_name)
            if isinstance(button, QPushButton):
                # Set default cursor shape to arrow
                button.setCursor(Qt.ArrowCursor)

                # Connect signals to slots
                button.enterEvent = lambda event, button=button: self.changeCursorToHand(button)
                button.leaveEvent = lambda event, button=button: self.changeCursorToArrow(button)


    def changeCursorToHand(self, button):
        button.setCursor(Qt.PointingHandCursor)  # Change cursor to pointing hand when mouse enters button area




    def changeCursorToArrow(self, button):
        button.setCursor(Qt.ArrowCursor)
        def closeEvent(self, event):
            confirm = QMessageBox.question(
                self, "Confirm Close",
                "Are you sure you want to close the application?",
                QMessageBox.Yes | QMessageBox.No, QMessageBox.No
            )

            if confirm == QMessageBox.Yes:
                event.accept()
            else:
                event.ignore()


    def upload_file(self):
        _translate = QtCore.QCoreApplication.translate
        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getOpenFileName(self, "Open File", "", "All Files (*);;Text Files (*.txt)", options=options)

        if file_path:
            self.file_path_label.setText(_translate("Dialog", "File uploaded: " + file_path))




    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Automatic Geomorphological Classification Tool", "Automatic Geomorphological Classification Tool"))
        self.label.setText(_translate("Dialog", "Preview of Result:"))
        self.label_4.setText(_translate("Dialog", "Please Download Result:"))
        self.pushButton_4.setText(_translate("Dialog", "Download"))
import result_rc


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_result_page()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
